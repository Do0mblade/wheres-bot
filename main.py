# -*- coding: utf-8 -*-


# –ò–º–ø–æ—Ä—Ç—ã

from aiogram import Bot, Dispatcher, executor, types
import time
import random
import sqlite3
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove
from aiogram.types import InputFile
from aiogram.utils.markdown import hlink

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from attributes.config import *
from attributes.connection import *
from attributes.keyboard import *
#from attributes.moduls import *
from attributes.text import *

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

storage = MemoryStorage()

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)


class UserState(StatesGroup):
   gen = State()
   age = State()



# –ö–æ–º–∞–Ω–¥—ã

@dp.message_handler(commands=['set_own_admin'])
async def send_welcome(message: types.Message):
   admin = 619402571
   cur.execute(f"UPDATE users SET admin_mode = 'admin' WHERE user_id = {admin}")
   print()
   print(cur.execute(f"SELECT * FROM users WHERE user_id = {admin}").fetchone())
   print('–í–ª–∞–¥–µ–ª—å—Ü—É –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')
   print()

@dp.message_handler(commands=['kalibr'])
async def send_welcome(message: types.Message):
   user_id = message.from_user.id

   check = cur.execute(f"""SELECT admin_mode FROM users WHERE user_id = {user_id}""").fetchone()

   if check[0] == 'admin':
      cur.execute("ALTER TABLE users ADD COLUMN referal TEXT")
      conn.commit()
      print('–ê–¥–º–∏–Ω –ø—Ä–æ–∏–∑–≤—ë–ª –∫–∞–ª–∏–±—Ä–æ–≤–∫—É!')
   else:
      print('–ù–µ –∞–¥–º–∏–Ω!')

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
   user_id = message.from_user.id

   check = cur.execute(f"""SELECT * FROM users WHERE user_id = {user_id}""").fetchone()

   if check:
      await message.answer('üóÉ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=MainMenuBtns)
   else:
      await message.reply(f'‚úã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>', parse_mode='HTML', reply_markup=ReplyKeyboardRemove())
      time.sleep(0.7)
      await message.answer(f'''
   –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ –ø–æ–¥–±–æ—Ä–µ –º–µ—Å—Ç –¥–ª—è –æ—Ç–¥—ã—Ö–∞.
   
   –ï—Å–ª–∏ —Ç—ã –Ω–µ –ø—Ä–æ—Ç–∏–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è, —á—Ç–æ–±—ã —è –º–æ–≥ –ª—É—á—à–µ –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ç–µ–±–µ –º–µ—Å—Ç–∞.
   
   ''', reply_markup=register_btns)

@dp.message_handler(lambda message: message.text == "üö´ –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ")
async def register_no(message: types.Message):
   await message.reply('‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ')
   time.sleep(0.7)
   await message.answer(f'‚ùó –ù–µ–ª—å–∑—è –ø–æ–π—Ç–∏ –ø—Ä–æ—Ç–∏–≤ —Å–∏—Å—Ç–µ–º—ã, {message.from_user.first_name}', reply_markup=register_btns)

@dp.message_handler(lambda message: message.text == "üìë –î–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –º–µ–Ω—è.")
async def register_yes(message: types.Message):
   user_id = message.from_user.id

   check = cur.execute(f"""SELECT * FROM users WHERE user_id = {user_id}""").fetchone()

   if check:
      await message.reply("‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=MainMenuBtns)
   else:
      await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª.", reply_markup=GenderMenus)
      await UserState.next()

@dp.message_handler(state=UserState.gen)
async def get_gender(message: types.Message, state: FSMContext):
   if message.text == '–º—É–∂—Å–∫–æ–π' or message.text == '–∂–µ–Ω—Å–∫–∏–π' or message.text == '–º' or message.text == '–∂' or message.text == '–ú—É–∂—Å–∫–æ–π' or message.text == '–ñ–µ–Ω—Å–∫–∏–π' or message.text == '–ú' or message.text == '–ñ' or message.text == 'üë® –ú—É–∂—Å–∫–æ–π' or message.text == 'üë© –ñ–µ–Ω—Å–∫–∏–π':
      await state.update_data(gen=message.text)
      await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.", reply_markup=ReplyKeyboardRemove())
      await UserState.next()
   else:
      await message.answer("–í—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n–ú—É–∂—Å–∫–æ–π/–ñ–µ–Ω—Å–∫–∏–π")

@dp.message_handler(state=UserState.age)
async def get_age(message: types.Message, state: FSMContext):
   try:
      val = int(message.text)
      if int(message.text) > 5:
         if int(message.text) < 130:
            await state.update_data(age=message.text)
            data = await state.get_data()

            first_name = message.from_user.first_name
            user_id = message.from_user.id

            if data['gen'] == '–º—É–∂—Å–∫–æ–π' or data['gen'] == '–º' or data['gen'] == '–ú—É–∂—Å–∫–æ–π' or data['gen'] == '–ú' or data['gen'] == 'üë® –ú—É–∂—Å–∫–æ–π':
               gender = '–ú—É–∂—Å–∫–æ–π'
            if data['gen'] == '–∂–µ–Ω—Å–∫–∏–π' or data['gen'] == '–∂' or data['gen'] == '–ñ–µ–Ω—Å–∫–∏–π' or data['gen'] == '–ñ' or data['gen'] == 'üë© –ñ–µ–Ω—Å–∫–∏–π':
               gender = '–ñ–µ–Ω—Å–∫–∏–π'

            cur.execute(f"""INSERT INTO users (first_name, user_id, age, gender) VALUES ('{first_name}', {user_id}, {data['age']}, '{gender}')""")
            conn.commit()

            await message.reply("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=MainMenuBtns)
            time.sleep(0.7)
            await message.answer("‚ö° –•–æ—Ç–∏—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏?", reply_markup=inline_kb_channel)

            if user_id == 619402571:
               msg = await message.answer("üñï –ù–µ –¥—É—à–∏ —Å—É–∫–∞!")
               time.sleep(0.8)
               await msg.delete()

            print(cur.execute(f'SELECT * FROM users WHERE user_id = {user_id}').fetchall())

            await state.finish()
         else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç)")
      else:
         await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å 6 –ª–µ—Ç!")
   except ValueError:
      await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!\n")



@dp.message_handler(lambda message: message.text == "üìã –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):

   user_id = message.from_user.id

   check = cur.execute(f"""SELECT * FROM users WHERE user_id = {user_id}""").fetchone()

   if check:

      us = cur.execute(f'SELECT * FROM users WHERE user_id = {message.from_user.id}').fetchall()

      for user in us:
         pass

      if int(user[3]) > 5 and int(user[3]) < 11:
         smile_age = 'üë∂'

      if user[4] == '–ú—É–∂—Å–∫–æ–π':
         smile_gender = 'üë®'
         if int(user[3]) > 10 and int(user[3]) < 17:
            smile_age = 'üë¶'
         if int(user[3]) > 16 and int(user[3]) < 60:
            smile_age = 'üë®'
         if int(user[3]) > 59:
            smile_age = 'üßì'
      if user[4] == '–ñ–µ–Ω—Å–∫–∏–π':
         smile_gender = 'üë©'
         if int(user[3]) > 10 and int(user[3]) < 17:
            smile_age = 'üëß'
         if int(user[3]) > 16 and int(user[3]) < 60:
            smile_age = 'üë©'
         if int(user[3]) > 59:
            smile_age = 'üëµ'

      me = await bot.get_me()

      await message.answer(f'''

      ü•∑ –í–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç `<b> {me.first_name} </b>` 

      üëΩ <i>Nickname</i>: {user[1]}

      {smile_age} <i>–í–æ–∑—Ä–∞—Å—Ç</i>: {user[3]}

      {smile_gender} <i>–ü–æ–ª</i>: {user[4]}

      üí∞ <i>–í–∞—à–∏ –±–∞–ª–ª—ã</i>: {user[5]}


      ''', parse_mode='HTML', reply_markup=inline_kb_channel)

   else:
      await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!\n\n–í–≤–µ–¥–∏—Ç–µ <b>/start</b>", parse_mode='HTML')
      await message.answer(
         "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–º–æ–∂–µ–Ω —Å–±—Ä–æ—Å –±–∞–∑—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–æ.")


@dp.message_handler(lambda message: message.text == "‚ù§ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def admin_menu(message: types.Message):
   data = cur.execute(f"""SELECT * FROM likes WHERE user_id = {message.from_user.id}""").fetchall()
   if len(data) == 0:
      await message.answer(f'<b>{message.from_user.full_name}</b>, –≤—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ –º–µ—Å—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.', parse_mode='HTML')
   else:
      await message.answer(f'<b>{message.from_user.full_name}</b>, –≤–æ—Ç –≤—Å–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å.', parse_mode='HTML')
      for i in data:
         Dislike_menu_btn = InlineKeyboardButton('üíî Dislike', callback_data=f'delete_like_place {i[2]}')
         Dislike_menu_btns = InlineKeyboardMarkup(row_width=2)
         Dislike_menu_btns.add(Dislike_menu_btn)
         dt = cur.execute(f"""SELECT * FROM places WHERE id = {i[2]}""").fetchone()
         if len(dt[3]) > 100:
            text = f'{dt[3][0:100]}...'
         else:
            text = f'{dt[3]}'
         await message.answer(f"""<b>{dt[1]}</b>\n\n{text}""", parse_mode='HTML', reply_markup=Dislike_menu_btns)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('delete_like_place '))
async def Delete_likes_places(callback_query: types.CallbackQuery):
   id = callback_query.data.replace('delete_like_place ', '')
   cur.execute(f"""DELETE FROM likes WHERE user_id = {callback_query.from_user.id} and post_id = {id}""")
   conn.commit()
   await callback_query.message.delete()

@dp.message_handler(lambda message: message.text == "üéÅ –ë–æ–Ω—É—Å—ã")
async def bonus(message: types.Message):
   user_id = message.from_user.id

   check = cur.execute(f"""SELECT * FROM users WHERE user_id = {user_id}""").fetchone()

   if check:
      check1 = cur.execute(f'SELECT bonus FROM users WHERE user_id = {message.from_user.id}').fetchone()
      if check1[0] == 0:
         score = cur.execute(f'SELECT scores FROM users WHERE user_id = {message.from_user.id}').fetchone()
         cur.execute(f'UPDATE users SET scores = {score[0] + 100} WHERE user_id = {message.from_user.id}')
         cur.execute(f'UPDATE users SET bonus = True WHERE user_id = {message.from_user.id}')
         conn.commit()
         await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>100</b> üí∞ –±–∞–ª–ª–æ–≤ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!', parse_mode='HTML')
      else:
         if check[8] is None:
            ch = 0
            while ch == 0:
               chars = 'abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
               promo = ''
               for i in range(10):
                  promo += random.choice(chars)
               if cur.execute(f"""SELECT id FROM users WHERE referal = '{promo}'""") is None:
                  print('–¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –µ—Å—Ç—å!')
               else:
                  cur.execute(f"""UPDATE users SET referal = '{promo}' WHERE user_id = {message.from_user.id}""")
                  conn.commit()
                  ch = 1
         await message.answer('–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –≤—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å(')
         time.sleep(0.4)
         await message.answer('–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É! <b>[–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ]</b>', parse_mode='HTML')
   else:
      await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!\n\n–í–≤–µ–¥–∏—Ç–µ <b>/start</b>", parse_mode='HTML')
      await message.answer(
         "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–º–æ–∂–µ–Ω —Å–±—Ä–æ—Å –±–∞–∑—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–æ.")

@dp.message_handler(lambda message: message.text == "üí≥ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å")
async def donate(message: types.Message):
   await message.answer("–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∫–æ–ø–µ–π–∫–æ–π)", reply_markup=Donate_money)

@dp.message_handler(lambda message: message.text == "‚Ñπ –ò–Ω—Ñ–æ")
async def info(message: types.Message):
   user_id = message.from_user.id

   check = cur.execute(f"""SELECT * FROM users WHERE user_id = {user_id}""").fetchone()

   if check:
      await message.answer(development_text.format(VERSION_BOT), reply_markup=inline_kb_channel)
   else:
      await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!\n\n–í–≤–µ–¥–∏—Ç–µ <b>/start</b>", parse_mode='HTML')
      await message.answer(
         "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–º–æ–∂–µ–Ω —Å–±—Ä–æ—Å –±–∞–∑—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–æ.")




@dp.message_handler(lambda message: message.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: types.Message):
   user_id = message.from_user.id

   check = cur.execute(f"""SELECT * FROM users WHERE user_id = {user_id}""").fetchone()

   if check:
      await message.answer(development_text.format(VERSION_BOT), reply_markup=inline_kb_channel)
   else:
      await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!\n\n–í–≤–µ–¥–∏—Ç–µ <b>/start</b>", parse_mode='HTML')
      await message.answer(
         "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–º–æ–∂–µ–Ω —Å–±—Ä–æ—Å –±–∞–∑—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–æ.")

@dp.message_handler(lambda message: message.text == "üîé –ü–æ–∏—Å–∫")
async def poisk(message: types.Message):

   user_id = message.from_user.id

   check = cur.execute(f"""SELECT * FROM users WHERE user_id = {user_id}""").fetchone()

   if check:
      await message.answer(f'''<b>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à –ø–æ–∏—Å–∫?</b>''', parse_mode='HTML', reply_markup=SettingsSearchBox)
   else:
      await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!\n\n–í–≤–µ–¥–∏—Ç–µ <b>/start</b>", parse_mode='HTML')
      await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–º–æ–∂–µ–Ω —Å–±—Ä–æ—Å –±–∞–∑—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–æ.")


@dp.callback_query_handler(lambda c: c.data == 'Search_no_filters')
async def Search_no_filters(callback_query: types.CallbackQuery):

   data = cur.execute(f"""SELECT * FROM places ORDER BY RANDOM() LIMIT 1""").fetchone()

   if data is None:
      await callback_query.message.answer('–ü–æ–∫–∞ –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ª–æ–∂–∏–ª–∏ –≤ –±–æ—Ç–∞.\n\n–ü–æ–∫–∞ –º—ã –≤—ã–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –∫ –Ω–∞–º –≤ –∫–∞–Ω–∞–ª –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–Ω–æ–≥–æ–µ —Ç–∞–º.', reply_markup=inline_kb_channel)
   else:

      user_id = callback_query.message.from_user.id

      check = cur.execute(f"""SELECT * FROM checked WHERE user_id = {user_id}""").fetchall()

      if len(check) > 5:
         cur.execute(f"""DELETE FROM checked WHERE user_id = {user_id}""")
         conn.commit()
         data = cur.execute(f"""SELECT * FROM places ORDER BY RANDOM() LIMIT 1""").fetchone()
      else:
         if len(check) == 1:
            data = cur.execute(f"""SELECT * FROM places WHERE id != {check[0][2]} ORDER BY RANDOM() LIMIT 1""").fetchone()
            if data is None:
               cur.execute(f"""DELETE FROM checked WHERE user_id = {user_id}""")
               conn.commit()
               await callback_query.message.answer('‚ú® –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞.\nüí´ –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö.')
               time.sleep(1.5)
               data = cur.execute(f"""SELECT * FROM places ORDER BY RANDOM() LIMIT 1""").fetchone()
         if len(check) == 2:
            data = cur.execute(f"""SELECT * FROM places WHERE id != {check[0][2]} and id != {check[1][2]} ORDER BY RANDOM() LIMIT 1""").fetchone()
            if data is None:
               cur.execute(f"""DELETE FROM checked WHERE user_id = {user_id}""")
               conn.commit()
               await callback_query.message.answer('‚ú® –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞.\nüí´ –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö.')
               time.sleep(1.5)
               data = cur.execute(f"""SELECT * FROM places ORDER BY RANDOM() LIMIT 1""").fetchone()
         if len(check) == 3:
            data = cur.execute(f"""SELECT * FROM places WHERE id != {check[0][2]} and id != {check[1][2]} and id != {check[2][2]} ORDER BY RANDOM() LIMIT 1""").fetchone()
            if data is None:
               cur.execute(f"""DELETE FROM checked WHERE user_id = {user_id}""")
               conn.commit()
               await callback_query.message.answer('‚ú® –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞.\nüí´ –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö.')
               time.sleep(1.5)
               data = cur.execute(f"""SELECT * FROM places ORDER BY RANDOM() LIMIT 1""").fetchone()
         if len(check) == 4:
            data = cur.execute(f"""SELECT * FROM places WHERE id != {check[0][2]} and id != {check[1][2]} and id != {check[2][2]} and id != {check[3][2]} ORDER BY RANDOM() LIMIT 1""").fetchone()
            if data is None:
               cur.execute(f"""DELETE FROM checked WHERE user_id = {user_id}""")
               conn.commit()
               await callback_query.message.answer('‚ú® –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞.\nüí´ –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö.')
               time.sleep(1.5)
               data = cur.execute(f"""SELECT * FROM places ORDER BY RANDOM() LIMIT 1""").fetchone()
         if len(check) == 5:
            data = cur.execute(f"""SELECT * FROM places WHERE id != {check[0][2]} and id != {check[1][2]} and id != {check[2][2]} and id != {check[3][2]} and id != {check[4][2]} ORDER BY RANDOM() LIMIT 1""").fetchone()
            if data is None:
               cur.execute(f"""DELETE FROM checked WHERE user_id = {user_id}""")
               conn.commit()
               await callback_query.message.answer('‚ú® –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞.\nüí´ –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö.')
               time.sleep(1.5)
               data = cur.execute(f"""SELECT * FROM places ORDER BY RANDOM() LIMIT 1""").fetchone()
         if len(check) == 0:
            cur.execute(f"""DELETE FROM checked WHERE user_id = {user_id}""")
            conn.commit()
            data = cur.execute(f"""SELECT * FROM places ORDER BY RANDOM() LIMIT 1""").fetchone()
            if data is None:
               cur.execute(f"""DELETE FROM checked WHERE user_id = {user_id}""")
               conn.commit()
               await callback_query.message.answer('‚ú® –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞.\nüí´ –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö.')
               time.sleep(1.5)
               data = cur.execute(f"""SELECT * FROM places ORDER BY RANDOM() LIMIT 1""").fetchone()


      cur.execute(f"""INSERT INTO checked (user_id, post_id) VALUES ({user_id}, {data[0]})""")
      conn.commit()

      TextMenuBTNS = InlineKeyboardMarkup(row_width=3)
      send = []

      if data[7] == '–Ω–µ—Ç':
         pass
      else:
         TextMenuBtns2 = InlineKeyboardButton('üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', url=f'{data[7]}')

      dd = cur.execute(
         f"""SELECT * FROM likes WHERE post_id = {data[0]} and user_id = {callback_query.from_user.id}""").fetchone()

      if dd != None:
         TextMenuBtns3 = InlineKeyboardButton('üíî Dislike', callback_data=f'del_from_favorite {data[0]}')
      else:
         TextMenuBtns3 = InlineKeyboardButton('‚ù§ Like', callback_data=f'add_to_favorite {data[0]}')
      if data[8] == '–Ω–µ—Ç':
         pass
      else:
         TextMenuBtns4 = InlineKeyboardButton('üóæ –ù–∞–π—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö', url=f'{data[8]}')
      TextMenuBtns5 = InlineKeyboardButton('‚û° –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç', callback_data='Search_no_filters')
      send.extend((TextMenuBtns2, TextMenuBtns3, TextMenuBtns4, TextMenuBtns5))
      TextMenuBTNS.add(*send)

      caption = f"""
      
   {data[1]}
      
   {data[3]}   
         
         """

      await bot.send_photo(chat_id=callback_query.message.chat.id, photo=f'{data[2]}', caption=caption, parse_mode='HTML',
                                 reply_markup=TextMenuBTNS)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('add_to_favorite '))
async def add_to_favorite(callback_query: types.CallbackQuery):
   id = callback_query.data.replace('add_to_favorite ', '')
   cur.execute(f"""INSERT INTO likes (user_id, post_id) VALUES ({callback_query.from_user.id}, {id})""")
   conn.commit()
   data = cur.execute(f"""SELECT * FROM places WHERE id = {id}""").fetchone()

   TextMenuBTNS = InlineKeyboardMarkup(resize_keyboard=True)

   if data[7] == '–Ω–µ—Ç':
      pass
   else:
      TextMenuBtns2 = InlineKeyboardButton('üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', url=f'{data[7]}')
      TextMenuBTNS.add(TextMenuBtns2)

   dd = cur.execute(
      f"""SELECT * FROM likes WHERE post_id = {data[0]} and user_id = {callback_query.from_user.id}""").fetchone()

   if dd != None:
      TextMenuBtns3 = InlineKeyboardButton('üíî Dislike', callback_data=f'del_from_favorite {data[0]}')
      TextMenuBTNS.add(TextMenuBtns3)
   else:
      TextMenuBtns3 = InlineKeyboardButton('‚ù§ Like', callback_data=f'add_to_favorite {data[0]}')
      TextMenuBTNS.add(TextMenuBtns3)
   if data[8] == '–Ω–µ—Ç':
      pass
   else:
      TextMenuBtns4 = InlineKeyboardButton('üóæ –ù–∞–π—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö', url=f'{data[8]}')
      TextMenuBTNS.add(TextMenuBtns4)
   TextMenuBtns5 = InlineKeyboardButton('‚û° –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç', callback_data='Search_no_filters')
   TextMenuBTNS.add(TextMenuBtns5)
   await callback_query.message.edit_reply_markup(TextMenuBTNS)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('del_from_favorite '))
async def add_to_favorite(callback_query: types.CallbackQuery):
   id = callback_query.data.replace('del_from_favorite ', '')
   cur.execute(f"""DELETE FROM likes WHERE user_id = {callback_query.from_user.id} and post_id = {id}""")
   conn.commit()
   data = cur.execute(f"""SELECT * FROM places WHERE id = {id}""").fetchone()
   TextMenuBTNS = InlineKeyboardMarkup(resize_keyboard=True)

   if data[7] == '–Ω–µ—Ç':
      pass
   else:
      TextMenuBtns2 = InlineKeyboardButton('üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', url=f'{data[7]}')
      TextMenuBTNS.add(TextMenuBtns2)

   dd = cur.execute(
      f"""SELECT * FROM likes WHERE post_id = {data[0]} and user_id = {callback_query.from_user.id}""").fetchone()

   if dd != None:
      TextMenuBtns3 = InlineKeyboardButton('üíî Dislike', callback_data=f'del_from_favorite {data[0]}')
      TextMenuBTNS.add(TextMenuBtns3)
   else:
      TextMenuBtns3 = InlineKeyboardButton('‚ù§ Like', callback_data=f'add_to_favorite {data[0]}')
      TextMenuBTNS.add(TextMenuBtns3)
   if data[8] == '–Ω–µ—Ç':
      pass
   else:
      TextMenuBtns4 = InlineKeyboardButton('üóæ –ù–∞–π—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö', url=f'{data[8]}')
      TextMenuBTNS.add(TextMenuBtns4)
   TextMenuBtns5 = InlineKeyboardButton('‚û° –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç', callback_data='Search_no_filters')
   TextMenuBTNS.add(TextMenuBtns5)
   await callback_query.message.edit_reply_markup(TextMenuBTNS)


@dp.callback_query_handler(lambda c: c.data == 'Search_yes_filters')
async def Search_yes_filters(callback_query: types.CallbackQuery):
   data = cur.execute("""SELECT * FROM categoryes""").fetchall()
   CATEGORYES_BTNS = InlineKeyboardMarkup(row_width=3)
   send = []
   for i in data:
      CATEGORYES_btns = InlineKeyboardButton(f'{i[1]}', callback_data=f'serch_cat {i[0]}')
      send.append(CATEGORYES_btns)
   CATEGORYES_BTNS.add(*send)
   await callback_query.message.answer('–í—ã–±–µ—Ä–∞–π—Ç–µ —á—Ç–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!', reply_markup=CATEGORYES_BTNS)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('serch_cat '))
async def Search_with_category(callback_query: types.CallbackQuery):
   cat_id = callback_query.data.replace('serch_cat ', '')
   data = cur.execute(f"""SELECT * FROM places WHERE category_id = {cat_id} ORDER BY RANDOM() LIMIT 1""").fetchone()

   if data is None:
      await callback_query.message.answer(
         '–ü–æ–∫–∞ –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ª–æ–∂–∏–ª–∏ –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n\n–ü–æ–∫–∞ –º—ã –≤—ã–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –∫ –Ω–∞–º –≤ –∫–∞–Ω–∞–ª –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–Ω–æ–≥–æ–µ —Ç–∞–º.',
         reply_markup=inline_kb_channel)
   else:

      user_id = callback_query.message.from_user.id

      check = cur.execute(f"""SELECT * FROM checked WHERE user_id = {user_id}""").fetchall()

      if len(check) > 5:
         cur.execute(f"""DELETE FROM checked WHERE user_id = {user_id}""")
         conn.commit()
         data = cur.execute(f"""SELECT * FROM places WHERE category_id = {cat_id} ORDER BY RANDOM() LIMIT 1""").fetchone()
      else:
         if len(check) == 1:
            data = cur.execute(
               f"""SELECT * FROM places WHERE id != {check[0][2]} and category_id = {cat_id} ORDER BY RANDOM() LIMIT 1""").fetchone()
            if data is None:
               cur.execute(f"""DELETE FROM checked WHERE user_id = {user_id}""")
               conn.commit()
               await callback_query.message.answer(
                  '‚ú® –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞.\nüí´ –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö.')
               time.sleep(1.5)
               data = cur.execute(f"""SELECT * FROM places WHERE category_id = {cat_id} ORDER BY RANDOM() LIMIT 1""").fetchone()
         if len(check) == 2:
            data = cur.execute(
               f"""SELECT * FROM places WHERE id != {check[0][2]} and id != {check[1][2]} and category_id = {cat_id} ORDER BY RANDOM() LIMIT 1""").fetchone()
            if data is None:
               cur.execute(f"""DELETE FROM checked WHERE user_id = {user_id}""")
               conn.commit()
               await callback_query.message.answer(
                  '‚ú® –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞.\nüí´ –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö.')
               time.sleep(1.5)
               data = cur.execute(f"""SELECT * FROM places WHERE category_id = {cat_id} ORDER BY RANDOM() LIMIT 1""").fetchone()
         if len(check) == 3:
            data = cur.execute(
               f"""SELECT * FROM places WHERE id != {check[0][2]} and id != {check[1][2]} and id != {check[2][2]} and category_id = {cat_id} ORDER BY RANDOM() LIMIT 1""").fetchone()
            if data is None:
               cur.execute(f"""DELETE FROM checked WHERE user_id = {user_id}""")
               conn.commit()
               await callback_query.message.answer(
                  '‚ú® –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞.\nüí´ –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö.')
               time.sleep(1.5)
               data = cur.execute(f"""SELECT * FROM places WHERE category_id = {cat_id} ORDER BY RANDOM() LIMIT 1""").fetchone()
         if len(check) == 4:
            data = cur.execute(
               f"""SELECT * FROM places WHERE id != {check[0][2]} and id != {check[1][2]} and id != {check[2][2]} and id != {check[3][2]} and category_id = {cat_id} ORDER BY RANDOM() LIMIT 1""").fetchone()
            if data is None:
               cur.execute(f"""DELETE FROM checked WHERE user_id = {user_id}""")
               conn.commit()
               await callback_query.message.answer(
                  '‚ú® –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞.\nüí´ –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö.')
               time.sleep(1.5)
               data = cur.execute(f"""SELECT * FROM places WHERE category_id = {cat_id} ORDER BY RANDOM() LIMIT 1""").fetchone()
         if len(check) == 5:
            data = cur.execute(
               f"""SELECT * FROM places WHERE id != {check[0][2]} and id != {check[1][2]} and id != {check[2][2]} and id != {check[3][2]} and id != {check[4][2]} and category_id = {cat_id} ORDER BY RANDOM() LIMIT 1""").fetchone()
            if data is None:
               cur.execute(f"""DELETE FROM checked WHERE user_id = {user_id}""")
               conn.commit()
               await callback_query.message.answer(
                  '‚ú® –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞.\nüí´ –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö.')
               time.sleep(1.5)
               data = cur.execute(f"""SELECT * FROM places ORDER BY RANDOM() LIMIT 1""").fetchone()
         if len(check) == 0:
            cur.execute(f"""DELETE FROM checked WHERE user_id = {user_id}""")
            conn.commit()
            data = cur.execute(f"""SELECT * FROM places ORDER BY RANDOM() LIMIT 1""").fetchone()
            if data is None:
               cur.execute(f"""DELETE FROM checked WHERE user_id = {user_id}""")
               conn.commit()
               await callback_query.message.answer(
                  '‚ú® –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞.\nüí´ –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö.')
               time.sleep(1.5)
               data = cur.execute(f"""SELECT * FROM places WHERE category_id = {cat_id} ORDER BY RANDOM() LIMIT 1""").fetchone()

      cur.execute(f"""INSERT INTO checked (user_id, post_id) VALUES ({user_id}, {data[0]})""")
      conn.commit()

      TextMenuBTNS = InlineKeyboardMarkup(row_width=3)
      send = []

      if data[7] == '–Ω–µ—Ç':
         pass
      else:
         TextMenuBtns2 = InlineKeyboardButton('üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', url=f'{data[7]}')

      dd = cur.execute(
         f"""SELECT * FROM likes WHERE post_id = {data[0]} and user_id = {callback_query.from_user.id}""").fetchone()

      if dd != None:
         TextMenuBtns3 = InlineKeyboardButton('üíî Dislike', callback_data=f'del_from_favorite {data[0]}')
      else:
         TextMenuBtns3 = InlineKeyboardButton('‚ù§ Like', callback_data=f'add_to_favorite {data[0]}')
      if data[8] == '–Ω–µ—Ç':
         pass
      else:
         TextMenuBtns4 = InlineKeyboardButton('üóæ –ù–∞–π—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö', url=f'{data[8]}')
      TextMenuBtns5 = InlineKeyboardButton('‚û° –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç', callback_data=f'serch_cat {cat_id}')
      send.extend((TextMenuBtns2, TextMenuBtns3, TextMenuBtns4, TextMenuBtns5))
      TextMenuBTNS.add(*send)

      caption = f"""

      {data[1]}

      {data[3]}   

            """

      await bot.send_photo(chat_id=callback_query.message.chat.id, photo=f'{data[2]}', caption=caption,
                           parse_mode='HTML',
                           reply_markup=TextMenuBTNS)




#
#
# –ê–î–ú–ò–ù –ú–ï–ù–Æ –ö–û–ú–ê–ù–î–´
#
#

@dp.message_handler(commands=['admin_menu'])
async def admin_menu(message: types.Message):
   user_id = message.from_user.id

   check = cur.execute(f"""SELECT admin_mode FROM users WHERE user_id = {user_id}""").fetchone()

   if check[0] == 'admin':
      await message.answer(f'{message.from_user.first_name} –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏!', reply_markup=ADMIN_MAIN_MENU)


@dp.message_handler(lambda message: message.text == "üóÇ –ü—É–±–ª–∏–∫–∞—Ü–∏–∏")
async def admin_menu(message: types.Message):
   user_id = message.from_user.id

   check = cur.execute(f"""SELECT admin_mode FROM users WHERE user_id = {user_id}""").fetchone()

   if check[0] == 'admin':
      await message.answer(f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ?', reply_markup=ADMIN_PUBLICATION_BTNS)

@dp.message_handler(lambda message: message.text == "üìë –ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö")
async def admin_menu(message: types.Message):
   user_id = message.from_user.id

   check = cur.execute(f"""SELECT admin_mode FROM users WHERE user_id = {user_id}""").fetchone()

   if check[0] == 'admin':
      await message.answer(f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ?', reply_markup=ADMIN_MENU_BD)

@dp.message_handler(lambda message: message.text == "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def admin_menu(message: types.Message):
   user_id = message.from_user.id

   check = cur.execute(f"""SELECT admin_mode FROM users WHERE user_id = {user_id}""").fetchone()

   if check[0] == 'admin':
      await message.answer(f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ?', reply_markup=ADMIN_BD_MENU_CATEGORYES)


class ADDCategory(StatesGroup):
   name = State()

@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def admin_menu(message: types.Message):
   user_id = message.from_user.id

   check = cur.execute(f"""SELECT admin_mode FROM users WHERE user_id = {user_id}""").fetchone()

   if check[0] == 'admin':
      await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')
      await ADDCategory.next()

@dp.message_handler(state=ADDCategory.name)
async def get_head(message: types.Message, state: FSMContext):
   async with state.proxy() as data:
      data['name'] = message.text
   cur.execute(f"""INSERT INTO categoryes (name) VALUES ('{data['name']}')""")
   conn.commit()
   ct_id = cur.execute(f"""SELECT * FROM categoryes WHERE name = '{data['name']}'""").fetchone()
   await message.answer(f'–û—Ç–ª–∏—á–Ω–æ! –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\nID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>{ct_id[0]}</b>\n–ù–∞–∑–≤–∞–Ω–∏–µ: "<b>{ct_id[1]}</b>"', parse_mode='HTML')
   await state.finish()

class DeleteCategory(StatesGroup):
   id = State()

@dp.message_handler(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def delete_category(message: types.Message):
   user_id = message.from_user.id

   check = cur.execute(f"""SELECT admin_mode FROM users WHERE user_id = {user_id}""").fetchone()

   if check[0] == 'admin':
      await message.answer('–í–≤–µ–¥–∏—Ç–µ id —É–¥–∞–ª—è–µ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')
      await DeleteCategory.next()

@dp.message_handler(state=DeleteCategory.id)
async def delete_cat_id(message: types.Message, state: FSMContext):
   async with state.proxy() as ct_cat:
      ct_cat['id'] = message.text
   cur.execute(f"""DELETE FROM categoryes WHERE id = {ct_cat['id']}""")
   conn.commit()
   await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!\n\nID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>{ct_cat['id']}</b>", parse_mode='HTML')
   await state.finish()

class PlacesState(StatesGroup):
   head = State()
   photo = State()
   description = State()
   price = State()
   sale = State()
   new_price = State()
   site = State()
   adress = State()
   category_id = State()

@dp.callback_query_handler(lambda c: c.data == 'add_post')
async def add_post(message: types.Message):
   await message.answer('–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–∞–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞.')
   await PlacesState.next()

@dp.message_handler(state=PlacesState.head)
async def get_head(message: types.Message, state: FSMContext):
   async with state.proxy() as data:
      data['head'] = message.text
   await message.answer('–û—Ç–ø—Ä–∞–≤—Ç–µ –±–æ—Ç—É —Ñ–æ—Ç–æ.')
   await PlacesState.next()

@dp.message_handler(content_types=['photo'], state=PlacesState.photo)
async def get_photo(message: types.Message, state: FSMContext):
   async with state.proxy() as data:
      data['photo'] = message.photo[0].file_id
   await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.')
   await PlacesState.next()

@dp.message_handler(state=PlacesState.description)
async def get_description(message: types.Message, state: FSMContext):
   async with state.proxy() as data:
      data['description'] = message.text
   await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞.\n–ï—Å–ª–∏ –ø–æ—Å–µ—â–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ, –≤–≤–µ–¥–∏—Ç–µ "0"\n–ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –≤–≤–µ–¥–∏—Ç–µ "-1"')
   await PlacesState.next()

@dp.message_handler(state=PlacesState.price)
async def get_price(message: types.Message, state: FSMContext):
   try:
      val = int(message.text)
      async with state.proxy() as data:
         data['price'] = int(message.text)
      await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.\n–ï—Å–ª–∏ –µ—ë –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ "0"')
      await PlacesState.next()
   except ValueError:
      await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!\n")

@dp.message_handler(state=PlacesState.sale)
async def get_sale(message: types.Message, state: FSMContext):
   try:
      val = int(message.text)
      async with state.proxy() as data:
         data['sale'] = int(message.text)
      await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π.\n–ï—Å–ª–∏ –µ—ë –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ "0"')
      await PlacesState.next()
   except ValueError:
      await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!\n")

@dp.message_handler(state=PlacesState.new_price)
async def get_price(message: types.Message, state: FSMContext):
   try:
      val = int(message.text)
      async with state.proxy() as data:
         data['new_price'] = int(message.text)
      await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–∞–π—Ç.\n–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ "–Ω–µ—Ç"')
      await PlacesState.next()
   except ValueError:
      await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!\n")

@dp.message_handler(state=PlacesState.site)
async def get_description(message: types.Message, state: FSMContext):
   async with state.proxy() as data:
      data['site'] = message.text
   await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è/–º–µ—Å—Ç–∞.\n–ï—Å–ª–∏ –∞–¥—Ä–µ—Å–∞ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ "–Ω–µ—Ç"')
   await PlacesState.next()

@dp.message_handler(state=PlacesState.adress)
async def get_adress(message: types.Message, state: FSMContext):
   async with state.proxy() as data:
      data['adress'] = message.text
   cat = cur.execute("""SELECT * FROM categoryes""").fetchall()
   await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!')
   for i in cat:
      await message.answer(f'id: <b>{i[0]}</b>\n–ù–∞–∑–≤–∞–Ω–∏–µ: "<b>{i[1]}</b>"', parse_mode='HTML')
   await PlacesState.next()

@dp.message_handler(state=PlacesState.category_id)
async def get_adress(message: types.Message, state: FSMContext):
   async with state.proxy() as data:
      data['category_id'] = message.text
   cur.execute(
      f"""INSERT INTO places (head, photo, description, price, sale, new_price, site, adress, category_id) VALUES ('{data['head']}', '{data['photo']}', '{data['description']}', {data['price']}, {data['sale']}, {data['new_price']}, '{data['site']}', '{data['adress']}', {data['category_id']})""")
   conn.commit()
   place_id = cur.execute(f"""SELECT id FROM places WHERE photo = '{data['photo']}'""").fetchone()
   await message.answer(f'–û—Ç–ª–∏—á–Ω–æ! –ú–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\nID –ø–æ—Å—Ç–∞: <b>{place_id[0]}</b>', parse_mode='HTML')
   await state.finish()


class DeletePost(StatesGroup):
   id = State()

@dp.callback_query_handler(lambda c: c.data == 'delete_post')
async def add_post(message: types.Message):
   await message.answer('–í–≤–µ–¥–∏—Ç–µ id —É–¥–∞–ª—è–µ–º–æ–≥–æ –ø–æ—Å—Ç–∞.')
   await DeletePost.next()

@dp.message_handler(state=DeletePost.id)
async def delete_post_id(message: types.Message, state: FSMContext):
   async with state.proxy() as dt:
      dt['id'] = message.text
   cur.execute(f"""DELETE FROM places WHERE id = {dt['id']}""")
   conn.commit()
   await message.answer(f"–ó–∞–ø–∏—Å—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!\n\nID –ø–æ—Å—Ç–∞: <b>{dt['id']}</b>", parse_mode='HTML', reply_markup=ADMIN_MAIN_MENU)
   await state.finish()


@dp.message_handler(lambda message: message.text == "üö™ –í—ã–π—Ç–∏")
async def admin_menu(message: types.Message):
   user_id = message.from_user.id

   check = cur.execute(f"""SELECT admin_mode FROM users WHERE user_id = {user_id}""").fetchone()

   if check[0] == 'admin':
      await message.answer(f'<b>{message.from_user.first_name}</b> –≤—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏!', parse_mode='HTML', reply_markup=MainMenuBtns)


# –ó–∞–ø—É—Å–∫


print('\n–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n')
print(cur.execute('SELECT * FROM users').fetchall())
time.sleep(0.3)
print('\n–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç:\n')
print(cur.execute('SELECT * FROM places').fetchall())
print()
print('\n–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n')
print(cur.execute('SELECT * FROM categoryes').fetchall())
print()

if __name__ == '__main__':
   executor.start_polling(dp, skip_updates=True)